print("hello world")
mean(x)
print("hello world")
x <- 1:50
mean(x)
source('~/.active-rstudio-document', echo=TRUE)
demo(graphics)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#create variable in Custom Environment
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
8 + 8
87 - 43
43 * 21
10 / 5
8 ^ 4 #Exponent in scietific format
format(8 ^ 4, scientific = FALSE)  #Exponentiation without scietific format
10 ** 5 #Exponentiation
76 %% 32 #Modulus
10 %/% 3 #Integer division
10 / 4
abs(-5) #Absolute
abs(-5) #Absolute
log(2) #Natuaral logarithm
log(2, base = 10) #Logarithm
exp(5) #Exponential
factorial(5)
pi
options() #Get global options
options(digits=10)
pi
options(digits=25) #Set gigits to 10
options(digits=20) #Set gigits to 10
pi
1/0 #Positive Infinity
-1/0 #Negative Infinity
Inf + 5 #Operation on Infinity = Infinity
is.finite(1/0) #Check if finite
is.infinite(1/0) #Check if infinite
is.nan(NA) #FALSE
Inf / Inf #NaN
is.nan(Inf/Inf) #Checks if NaN
NA + 5
is.na(NA) #Checks if NA
is.na(NaN) #TRUE
5 > 2
5 >= 2
5 < 2
5 <= 2
5 == 2
5 != 2
"b" > "a"
!(TRUE)
TRUE | FALSE
TRUE & FALSE
student.marks <- c(10, 20, 30, 40) #Combine function
student.gracemarks <- student.marks + 5
mean(student.marks) #Average/Mean
student.gracemarks <- student.marks + 5
student.gracemarks
student.marks >= 30
student.physics.marks <- c(15, 21, 34, 32)
student.chemistry.marks <- c(17, 26, 39, 24)
student.total.marks <- student.physics.marks + student.chemistry.marks
student.total.marks
student.names <- c("John", "Shaw", "Derek", "Mango")
student.weight <- c(45.63, 65.6, 45.2, 34.9)
student.marks <- c(45L, 17L, 18L, 50L) #L represents integer
str(student.names)
is.character(student.names);
is.numeric(student.weight)
is.integer(student.marks)
is.numeric(student.marks) #TRUE. Integer = Numeric
is.integer(student.weight) #FALSE. Numeric <> Integer
student.sports.interested <- c(TRUE, T, FALSE, F) #TRUE ~ T; FALSE ~ F. Logical vector
complex.vector <- c(98+3i, 21+8i, 11 + 12 i 98-65i) #Complex Vector
complex.vector <- c(98+3i, 21+8i, 11 + 12i, 98-65i) #Complex Vector
is.complex(complex.vector)
student.gracemarks
vector("character", length = 4) #Create a character vector. default: emply string
vector("numeric", length = 4) #Create a numeric vector. default: 0
vector("integer", length = 4) #Create a integer vector. default: 0
vector("logical", length = 4) #Create a logical vector. default: FALSE
vector("complex", length = 4) #Create a complex vector. default: 0 +0i
student.physics.marks <- c(15, 21, 34, 32)
student.chemistry.marks <- c(17, 26, 39, 24)
student.total.marks <- student.physics.marks + student.chemistry.marks
str(student.total.marks)
student.total.marks >= 50
student.names[1] #indexing starts at 1
student.names[2]
student.names[1:3]
student.names[c(T,F,T,F)] #Extract 1st and 3rd element and ignore 2nd and 4th element
student.names[student.physics.marks >= 75]
student.names[student.physics.marks >= 30]
students.weight <- c(43.32, 56.89, 45.64, "74.56")
str(students.weight)
is.character(student.weight) #TRUE
is.character(students.weight) #TRUE
is.numeric(students.weight) #FALSE
as.numeric(student.physics.marks >= 75) #Converts logical values to numeric values. T=1,F=0
as.numeric(student.physics.marks >= 30) #Converts logical values to numeric values. T=1,F=0
as.character(student.total.marks)
as.integer(student.weight)
as.numeric(student.names)
source('C:/Github/R/Variables.R')
student.genders <- c("Male", "Female", "Male", "Female") #Character Vector
str(student.genders)
student.gender.factor <- c(student.genders)
student.gender.factor
student.gender.factor <- factor(c(student.genders))
student.gender.factor
as.numeric(student.gender.factor) #Explicit coercion
student.blood.groups <- factor(c("A", "AB", "A", "O"), levels = c("A", "B", "AB", "O"))
str(student.blood.groups)
student.blood.groups
student.names <- c("John", "Shaw", "Derek", "Mango")
student.weight <- c(45.63, 65.6, 45.2, 34.9)
student.physics.marks <- c(15, 21, 34, 32)
student.chemistry.marks <- c(17, 26, 39, 24)
student.genders <- factor(c("Male", "Female", "Male", "Female"))
student.total.marks <- student.physics.marks + student.chemistry.mark
student1 <- list(student.names[1], student.weight[1], student.genders[1], student.total.marks[1]])
student1 <- list(student.names[1], student.weight[1], student.genders[1], student.total.marks[1])
str(student1)
student1
student11 <- list(name = student.names[1],
weight = student.weight[1],
sex = student.genders[1],
marks = student.total.marks[1])
str(student11)
student11
student11 <- list(name = student.names[1],
weight = student.weight[1],
sex = student.genders[1],
marks = c(student.physics.marks[1], student.chemistry.marks[1])
totalmarks = student.total.marks[1])
student11 <- list(name = student.names[1],
weight = student.weight[1],
sex = student.genders[1],
marks = c(student.physics.marks[1], student.chemistry.marks[1]),
totalmarks = student.total.marks[1])
str(student11)
student11
student11[1]
typeof(student11[1])
student11[1] #When subsetting from a List the result is a list (same with vector)
typeof(student11[1]) #Type is List
student11[[1]] #return object of it's own type
typeof(student11[[1]] #Type is character
typeof(student11[[1]] #Type is character
typeof(student11[[1]]) #Type is character
student11[1:3]
student11[["name"]]
student11["name"]
student1$gender
student1$sex
student11$sex
student11[c("name", "totalmarks")]
length(student11) #Number of elements in the list
student.names <- c("John", "Shaw", "Derek", "Mango")
student.weight <- c(45.63, 65.6, 45.2, 34.9)
student.physics.marks <- c(15, 21, 34, 32)
student.chemistry.marks <- c(17, 26, 39, 24)
student.genders <- factor(c("Male", "Female", "Male", "Female"))
student.total.marks <- student.physics.marks + student.chemistry.mark
student.total.marks <- student.physics.marks + student.chemistry.marks
students <- data.frame(student.names, student.weight, student.genders, student.physics.marks,
student.chemistry.marks, student.total.marks)
typeof(students)
str(students)
students
students
students
students <- data.frame(student.names, student.weight, student.genders, student.physics.marks,
student.chemistry.marks, student.total.marks,
stringsAsFactors = FALSE) #Explicitly mention that charactor vectors should not be converted to factors
str(students)
students #Data frame will give an integer to each row (ROw Names). The names of each column is the name of the vector. In a data frame vector of characters are automatically converted to factors by default
students[1]
student1$sex
students[1]
typeof(students[1])
students[[1]]
typeof(students[[1]])
students$student.names
students$student.names[1] #Access element
typeof(students$student.names) #Character (Vector)
students$student.names[1] #Gets the name of the first student
students[1:3]
students[c("student.names", "student.genders", "student.total.marks")]
students[1, 3] #Row Number, Column Number
students[1, 2] #Row Number, Column Number
students[1:2, 1:3] #Row Number, Column Number
students[1:2, 1:3] #Rows, Columns. Extract Row 1&2 with Columns 1,2,3 (2 Rows with 3 Columns)
students[, 1] #Get all rows for Column 1
students[1,] #Get all columns for Row 1
students[c(T,F,T,F), ] #Get all columns for Row 1 and 3
students[c(student.genders == "Male"), ]
students[c(T,F,F,T), ] #Get all columns for Row 1 and 4
students[c(student.genders == "Male"), ]
students[c(student.total.marks >= 50), ] #Get details of students with marks more than 50
student.marks <- rbind(student.physics.marks, student.chemistry.marks) #Row-wise binding creation of Matrix
student.marks
student.marks <- lbind(student.physics.marks, student.chemistry.marks) #Row-wise binding creation of Matrix
student.marks <- cbind(student.physics.marks, student.chemistry.marks) #Row-wise binding creation of Matrix
student.marks #Each vector is a column in the matrix
rownames(student.marks) <- student.names #Assign custom Row Names
student.marks
arr <- matrix(c(10L, 20L, 30L, 40L, 50L, 60L, 70L, 80L), ncol = 2, nrow =4) #Arrange the elements of the 1-D vector in 2 columns and 4 rows
arr
arr <- matrix(c(10L, 20L, 30L, 40L, 50L, 60L, 70L, 80L), ncol = 4, nrow = 2) #Arrange the elements of the 1-D vector in 4 columns and 2 rows
arr
arr <- matrix(c(10L, 20L, 30L, 40L, 50L, 60L, 70L, 80L), ncol = 4, nrow = 2) #Arrange the elements of the 1-D vector in 4 columns and 2 rows
arr
arr <- matrix(c(10L, 20L, 30L, 40L, 50L, 60L, 70L, 80L), ncol = 4, nrow = 2, byrow = TRUE) #Arrange the elements of the 1-D vector in 4 columns and 2 rows (Column wise)
arr <- matrix(c(10L, 20L, 30L, 40L, 50L, 60L, 70L, 80L), ncol = 4, nrow = 2, byrow = TRUE) #Arrange the elements of the 1-D vector in 4 columns and 2 rows (Column wise)
arr
arr <- matrix(c(10L, 20L, 30L, 40L, 50L, 60L, 70L, 80L), ncol = 2, nrow = 4) #Arrange the elements of the 1-D vector in 2 columns and 4 rows (column wise by default)
arr
student.marks[1, 2] #Row Number, Column Number
student.marks #Each vector is a column in the matrix
student.marks[1:3, 1:2] #Rows, Columns. Extract Row 1 to 3 with Columns 1,2,(3 Rows with 2 Columns)
student.marks[, 1] #Get all rows for Column 1 (Get all Chemistry marks)
student.marks[1,] #Get all columns for Row 1 (Get all marks of student 1)
student.marks[c(T,F,F,T), ] #Get all columns for Row 1 and 4. Used for filtering rows
student.marks[c(T,F,F,T), ] #Get all columns for Row 1 and 4. Used for filtering rows
student.marks[c(student.physics.marks >= 20), ] #Get details of students with physics marks more than 20
student.marks #Each vector is a column in the matrix
rowSums(student.marks)
colSums(student.marks)
colMeans(student.marks)
class1.marks = cbind(class1.physics.marks, class1.chemistry.marks)
student.marks[, 1] #Get all rows for Column 1 (Get all Chemistry marks)
class1.physics.marks <- c(15, 21, 34, 32)
class1.chemistry.marks <- c(17, 26, 39, 24)
class1.marks = cbind(class1.physics.marks, class1.chemistry.marks)
class1.marks
class2.physics.marks <- c(16, 28, 39, 44)
class2.chemistry.marks <- c(19, 23, 33, 42)
class2.marks = cbind(class2.physics.marks, class2.chemistry.marks)
class2.marks
class.all.marks <- array(c(class1.marks, class2.marks), dim(4,2,2)) #ROw Number, Column Number, Sheet Number (4 Rows with 2 Columns and 2 Sheets)
class.all.marks <- array(c(class1.marks, class2.marks), dim=c(4,2,2)) #ROw Number, Column Number, Sheet Number (4 Rows with 2 Columns and 2 Sheets)
class.all.marks
class.all.marks[2,2,2] #Row Number, Column Number, Sheet Number
class.all.marks[1:3, 2,] #Row 1 to 3, Column 2, All sheets
source('C:/Github/R/7 Array.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
source('C:/Github/R/8 Function Basic.R')
student.english.quiz.marks <- c(51L, 46L, 51L, 38L)
student.english.viva.marks <- c(17L, 22L, 29L, 15L)
student.english.total.marks <- GetTotal(student.english.quiz.marks, student.english.viva.marks)
GetTotal <- function(quiz.marks, viva.marks, extra.marks = average.viva.marks) { #extra.marks is set to the value of a variable
average.viva.marks <- mean(viva.marks)  #Setting the value of average.viva.marks. extra.marks will not be evaluated yet.
total.marks <- quiz.marks + viva.marks + extra.marks #The value of extra.marks will be resolved now since it's being used for the first time
total.marks
}
student.english.total.marks <- GetTotal(student.english.quiz.marks, student.english.viva.marks)
print(student.english.total.marks)
GetMarksSummary <- function(quiz.marks, viva.marks) {
total.marks <- quiz.marks + viva.marks
avg.marks <- mean(total.marks)
return (list(total = total.marks, average = avg.marks))
}
student.chemistry.quiz.marks <- c(59L, 58L, 63L, 44L)
student.chemistry.viva.marks <- c(16L, 24L, 26L, 11L)
student.chemistry.marks.summary <- GetMarksSummary(student.chemistry.quiz.marks, student.chemistry.viva.marks)
print(student.chemistry.marks.summary)
GetTotalMarks <- function(quiz.marks, viva.marks, assignment.marks = 5L) { #assignment is default paramter
total.marks <- quiz.marks + viva.marks + assignment.marks
total.marks #Same as returning the marks
}
GetTotalMarks #return the function itself
formats(GetTotalMarks) #Access arguments
formals(GetTotalMarks) #Access arguments
body(GetTotalMarks) #Acces body
MyGetTotalMarks <- GetTotalMarks
MyGetTotalMarks
MyGetTotalMarks(c(13L, 43L), c(46L, 45L))
MyGetTotalMarks(c(13L, 43L. 44L), c(46L, 45L, 42L))
MyGetTotalMarks(c(13L, 43L, 44L), c(46L, 45L, 42L))
do.call(MyGetTotalMarks, list(c(13L, 43L, 44L), c(46L, 45L, 42L)))
MyGetTotalMarks(c(13L, 43L, 44L), c(46L, 45L, 42L))
do.call(MyGetTotalMarks, list(quiz.marks = c(13L, 43L, 44L), viva.marks = c(46L, 45L, 42L)))
do.call(function (quiz.marks, viva.marks) {
quiz.marks + viva.marks
}, list(quiz.marks = c(13L, 45L, 65L), viva.marks = c(45L, 24L, 36L)))
source('C:/Github/R/9 Control Flow.R')
source('C:/Github/R/9 Control Flow.R')
source('C:/Github/R/9 Control Flow.R')
source('C:/Github/R/9 1 Control Flow (If).R')
source('C:/Github/R/9 1 Control Flow (If).R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Github/R/9 5 Control (While).R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Github/R/9 7 Control (Apply).R')
student.marks
source('C:/Github/R/9 7 Control (Apply).R')
source('C:/Github/R/9 7 Control (Apply).R')
apply(student.marks, 1, sum)
apply(student.marks, 2, average)
apply(student.marks, 2, mean)
apply(student.marks, 1, max)
apply(student.marks, 1, which.max) #Max value of each Row
colnames(student.marks)[apply(student.marks, 1, which.max)]
rownames(student.max)[apply(student.marks, 2, which.max)]
rownames(student.marks)[apply(student.marks, 2, which.max)]
apply(student.marks, 2, mean) #Column = 2. #Mean of all columns (subjects)
apply(student.marks, 2, max) #Column = 2. #Max marks in each subject (subjects)
rownames(student.marks)[apply(student.marks, 2, which.max)]
apply(student.marks, 1, sum) #1 is the margin (Work with Row) #Sum is the function (so we are doing row-wise summation)
rownames(student.marks)[apply(student.marks, 2, which.max)]
apply(student.marks, 1:2, function(x) x + 2)
student.marks
library() #lists are installed packages
library() #lists are installed packages
packages <- installed.packages
View(packages)
View(students)
packages <- installed.packages
packages <- installed.packages()
View(packages)
Search()
search()
library("parallel") #quoutes are not mandatory, but casing is sensitive. #library(parallel)
search()
detach(package:parallel, unload=TRUE) #unload is FALSE by default. If unload is true then the package will be detached as well removed from memory. Else it will continue to stay in memory
search()
load(newpackage) #Should give error since package doesn't exist
if(!require("newpackage")) {  #Returns TRUE if "newpackage" is installed
#Download and install package
}
install.packages("ggplot2")
setRepositories() #Set new Repositories
setRepositories() #Set new Repositories
library(devtools)
install.packages("devtools") #This package is needed to installing other packages from GITHUB
library(devtools)
install_github("slidify", "ramnathv") #Package Name, Author Name
install_github("ramnathv/slidify") #Package Name, Author Name
library(githubinstall)
install.packages(githubinstall)
install.packages("githubinstall")
library(githubinstall)
githubinstall(slidify)
githubinstall("slidify")
install.packages("stringi",type="mac.binary")
install.packages("stringi")
githubinstall("slidify")
setwd("~/R Sample")
getwd()
setwd("C:\Github\R\SampleData")
setwd("C:\\Github\\R\\SampleData")
getwd()
